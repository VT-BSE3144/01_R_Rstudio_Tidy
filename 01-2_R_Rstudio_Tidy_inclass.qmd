---
title: "01-2_R_Rstudio_Tidy_Inclass"
format: html
editor: visual
---

# **Week 1 - In Class**

## **Data Management within Spreadsheets**

### Motivation

Have you ever opened up a spreadsheet after not looking at it for a month and not remember what was what? Or attempted to look at a friend's spreadsheet and had no idea what was going on? Engineering practice fundamentally is done in collaborative teams, and we have more data accessible to us every day. While the focus of our course will be using R, it's worth a look at some simple, basic approaches to organizing data within spreadsheets that allow quick examination as a user, but also are easy to import into analysis programs (e.g. R). The Top 12 below are intended for organizing data---not to do the data analysis. The result is a raw data product that can be shared and used for data analysis (with some rearrangement).

### Reading

The material summarized below is from this week's reading ([Broman and Woo, 2018](https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1375989)). 

### Top 12 for Data Organization

-   Organize data as a series of rectangles in separate sheets. 

    -   1 row for column IDs., remaining rows the observations.

-   One piece of data per cell. 

    -   Imagine you are running an instrument with the racks to hold your samples. Each rack (A,B,C) has 10 sample slots. For the label, you could use A-1, A-2,\... or have 2 columns: column 1 containing the rack ID, column 2 containing the sample slot ID. Using the latter (2-columns) is preferred. Why? In subsequent data analysis, this allows you to easily sort based on rackID (imagine there was a problem when the instrument got to rack B).

    -   Add notes in separate columns

    -   Add units in column name or separate column/data dictionary/annotation.

-   Be consistent

    -   Use consistent "codes" for categorical variables. For example, imagine if you have a list of chemicals with a label for flammable or corrosive. As you enter data, sometimes you write out flammable, but other times just flam. What should you do? Choose one and stick with it! (Once we get into R there are some special jargon: "codes" are "levels" and "categorical variables" are "factors").

    -   Use consistent code for missing values.  Fill in every cell even if the value is unknown. While some datasets use a default number (e.g. -9999) to signify no data, it's preferred to use NA. Never put a note in the data column; rather have a separate column just for notes.

    -   Use consistent variable names. When you have multiple spreadsheets representing the same type of data (e.g. flow record from different sites; experimental data from different days), keep your variable names the **same** and avoid spaces (e.g. "nitrate_mgperml" is preferred over "nitrate mg per ml)

    -   Keep layout consistent between sheets. One approach here is to set up a template, and then work from there.

    -   Use consistent file names. For example, Q_James_2015.csv and Potamac_Q_2015.csv are not consistent making it more difficult to sort, read into software, and view.

    -   Use consistent date formats. This is a **big one**! I prefer using yyyymmdd, or yyyy-mm-dd. If you sometimes show 01/22/2021 and other times 20210122, it'll make it difficult to perform data analysis!

    -   Use consistent notes in your note column. 

-   Choose good names

    -   No spaces, choose with an underscore or hyphen, avoid special characters.  Using CamelCase (e.g. ExampleFileName). Include units if possible, avoid abbreviations (but not at the expense of too long)\
        See the table below from datacarpentry.org that illustrates this concept:\
        ![](https://lh7-us.googleusercontent.com/6E414b8y_LGxzcTaj8XP1pLctwzLFpxRiN6GwSrFq7UM24PrtqrQaz-rPN7stksPL67dH-TSkKZQvq8SYJ6PGEq9j4kPkME1C-8L5FoVhOyAStDff4ebe1T5IIlBuwAXmOPpHG09VF-obrwdpqrm8Q)

-   Write dates as YYYY-MM-DD. This is a global standard (ISO 8601), and using this consistently is good practice. Unfortunately, Excel is not consistent with how dates are treated across platforms (e.g. mac vs PC). Furthermore, Excel will almost always try to convert the date into a number based on an arbitrary initial date (e.g. 1904). Here are approaches to get around this:

    -   Use plain text format for columns containing text: select column → in the menu bar, select format cells → choose "text"

    -   Add dates as YYYYMMDD (e.g. 20210122)

    -   Add dates in between **apostrophes** ('2021-01-22'). This approach saves as text and not numeric. 

6.  No empty cells - use "NA" when you do not have data for a given cell in a spreadsheet (for a column or row that is otherwise full of data)

Are the following spreadsheets following good practice? Why or why not?

![](Picture1.png)

Figures A & B - you'd need to rearrange and figure out what is going on

Figure C - data is already processed to some degree, and you don't have access to raw data

Figure D - Incomplete table, either fill out completely or break into 2 tables. See figure 6 in reading.

7.  Use a data dictionary. Keep data in a data file, **use a complimentary README file (or a metadata/annotation sheet)** that contains 'metadata'. 

    -   This should include explanation of the variable, units, expected values (minimum and maximum). It may also include information about how the data was collected and how the experiment was performed. 

    -   [Here is an example README](https://drive.google.com/open?id=14nm6m0XQPaHHv1K5rluh2DH43k_s6pri) from the Vermont Covid dashboard used in exercise e below. 

    -   This could be a txt file, rtf, html, csv or any other file type.  

8.  Do not perform calculations in **raw data files.** Use a separate file for visualizations, calculations, analysis, etc.

9.  Do not use color or highlighting in data files. Rather, use a column that provides a note instead of highlighting cells. (This is because the color or highlighting is data! Every datum gets its own cell - #2.)

10. Backup data. Use version control---if anything is added, updated, etc save a new version of the file..![](https://lh7-us.googleusercontent.com/ALzSEggRGgFN4VlD80lauv-jPQe7YS74Nuq28XAlFR-FQahwwH9AEBfm-B6fasHsrvF2zuFyy__aRqIi2b32NLg7Xzegare02lgfwiz2IEK9EEKZ9Tg7AI2FXACDQusKmA--YDsg9dM6JZ26XOr0aQs)

11. Validate data. In Excel, Data → Validation (see icon at right), or Data  → Data Validation in Google Sheets. Then you can set up logical rules to check that your columns of data contain valid values. Any values that don't pass your logical test will be highlighted. To see the rules you have created [follow these instructions](https://support.microsoft.com/en-us/office/find-cells-that-have-data-validation-rules-7940468a-c95d-422f-a3fb-8fa0b90e5810).

12. Save data in plain text files. Save as -\> Format -\> csv. Why? Simplified archive, preservation of data for future scientists and engineers. When data is saved in a proprietary format, sharing across versions/platforms and the future may be hampered.

Also check out the useful list of [shortcut keys in Excel](https://support.microsoft.com/en-us/office/keyboard-shortcuts-in-excel-1798d9d5-842a-42b8-9c99-9b7213f0040f), or [shortcut keys in Google Sheets](https://support.google.com/docs/answer/181110?visit_id=638102624813361659-1097526140&p=spreadsheets_shortcuts&rd=1).

### Exercises

1.  Identify the 10 major issues within [this spreadsheet](https://drive.google.com/file/d/1jlJtx9PbDZ_AUZ4RDXUkqUI-vnb36WdV/view?usp=sharing). 

Tip: Focus on inconsistencies within the table and data values.

Answer: [link here](https://drive.google.com/file/d/1jlxtBXXIEo24dKY5Hk3Sk-hNZSwEGhhc/view?usp=sharing) (issues are commented in Excel).

2.  Convert [this spreadsheet](https://drive.google.com/file/d/1jo_hQ_NGOgBiz8WJQFINSrAm-rLAqPoy/view?usp=sharing) into a single tidy 'rectangle' containing only the raw data. Your new table will be a 21x5 rectangle including the one header row.

Tip: What is the additional column you can add to get all of the data in one table? What additional column would you add to address the 10.8 cell?

Answer: [link here](https://drive.google.com/file/d/1jqDCBAzz-nDAbB0lr6-xy1ZRSQEMBLBJ/view?usp=sharing)

3.  Identify what's wrong with the [following spreadsheet](https://drive.google.com/file/d/1juDCYWaHF_JVOYfp4enAthPWqo2Vwn1q/view?usp=sharing). Create a tidy version following best practices.

Tip: Think about how the formatting is used here, and whether it would carry over when saved as a text or csv file (comma separated file).

Answer: [link here](https://drive.google.com/file/d/1jupy9qTjFI4vzHtBZgKMo9jp8ImleYIz/view?usp=sharing)

4.  Convert the [following spreadsheet](https://drive.google.com/file/d/1jypfQ-qtxJs8BTtpKsDE4cQ3BAJQRdSg/view?usp=sharing) into a tidy version following best practices.

Tip: You'll end up with 5 columns, 33 rows.

Answer: [Link here](https://drive.google.com/file/d/1k7ja-7Lx3fz4dt6H4Oj6OZQiHbksqrt0/view?usp=sharing)

5.  Validation. A worthwhile exercise with any dataset. Here, consider [data downloaded](https://drive.google.com/file/d/1kHj1hAdwWDF3HbxYrl8GByfZEzl8u96N/view?usp=sharing) from Vermont's COVID [dashboard](https://app.powerbigov.us/view?r=eyJrIjoiMzc4MDYyZTgtMWI3Ny00NjNhLWI2OTUtYzhjY2YxODY1MDg4IiwidCI6IjIwYjQ5MzNiLWJhYWQtNDMzYy05YzAyLTcwZWRjYzc1NTljNiJ9) (this is just the vaccine data now). 

    -   First, you'll notice there are some really powerful graphics - - they are using organized, validated data along with some cool software (e.g. they may be using a microsoft product; there are many data visualization companies (Tableau) to free software (e.g. R)). 

    -   Navigate to the [data portal](https://geodata.vermont.gov/datasets/vt-covid-19-cases-by-county-time-series?selectedAttribute=C_New). If you click on "View Full Details" ([or this link](https://geodata.vermont.gov/datasets/VCGI::vt-covid-19-cases-by-county-time-series/about)), you'll be able to find definitions for each of the data columns **(this is essentially the README file for this dataset)**. You'll find a formal GIS metadata file. The downloaded data file is the csv file downloaded from their data portal. For illustration, I've intentionally created 2 errors in one of the values for Addison County. Can you spot them?

**Tip**: Sort the data by county name. Identify data cells (in columns from C_New to T_Total) that have incorrect data using the Data Validation tool. For example, for the Column C_New, each cell is required to be numeric and contain a value from 0 to an upper bound. You can highlight the entire column by selecting the column E, then navigate in the menu to Data → Validation and set appropriate bounds. The data validation screen has a dropdown to circle invalid entries. 

**Tip 2**: For Addison county, create a quick plot of total cases. You should be able to identify an incorrect value based on the notion that the column represents total cases and cannot increase then decrease.

## R & Rstudio

**We recommend that you follow along with the source code for this document " in the Posit/Rstudio Cloud here: ​​<https://posit.cloud/spaces/115479/content/2122430>**

### **Introduction**

This week we'll begin diving into R. You've all had the opportunity to watch or read the introductory R material 

why R reading - <https://datacarpentry.org/R-ecology-lesson/00-before-we-start.html>   

why R video - <https://www.youtube.com/watch?v=kfcX5DEMAp4>  

Another great resource that you have freely available is "R for Data Science" - <https://r4ds.had.co.nz>. One of the awesome benefits of using R is that the software is community driven. For example, these resources are created and shared by users, who seek to share their knowledge and galvanize the next generation of data scientists and engineers. 

Because of the large community, there are many resources to use for our class and not reinvent material. This lesson is drawn from the Data Carpentry for Biologists course, and augmented by other resources (e.g. other collaborators, colleagues, and research organizations such as the National Science Foundation center NEON). 

### **R vs. RStudio**

So what is the difference between R and R-studio? R is the actual programming language, whereas Rstudio is just an interface that makes coding easier. 

My first R-code was in 2002, when I was a postdoc in New Zealand. Faced with a dataset of 77 streams with hundreds of water quality measurements and hourly streamflow data for 2 decades at each station, I was tasked with developing a regression model to estimate the amount of carbon moving through every stream and river across both islands of New Zealand. At the time, R was a freely available statistical programming language, and I learned enough to create estimate the amount of carbon across the country: 

![Figure 1: Figure of measured vs estimated carbon in New Zealand Rivers, from Scott et al., 2006, https: //doi.org/10.1029/2005GL024644](fig1-1.png)

### **RStudio**

When you open up RStudio, there are 4 basic windows: 

-   R Console : a place where you can enter commands directly at the R prompt which is a "\>" right caret 

-   Code editor: a place to create, document, and save code. This file is an example of a MarkDown file, which provides the ablity to run snippets of code embedded within corresponding text. 

-   Workspace & History: where variables / matrices are kept track of 

-   Files, Plots, Packages & Help: This pane is for managing each of these things, files, plots, packages, and help documentation.

### **Let's get started : Basics**

```{r}
7+9
```

• when you type this into the console, the command returns a value 

• to assign the command to a variable, use \<- as in the following: 

```{r}
x <- 7+9
```

Let's consider a simple example where we want to convert 25 degrees C to Farenheight. We know the formula is the Temp(F) = Temp(C)\*9/5 + 32 

See below for the R code. Notice that I've also added a comment using the hashtag #. The \# informs the program to not run the text that follows. Thus, it provides an easy approach to document your steps. We'll use this ALOT. 

\# Convert temperature from Celcius to Farenheight 

```{r}
TC <- 50

TF <- TC*9/5+32

TF
```

**Assignments format**

• comment before each problen and each sub-problem 

• make sure result prints out on 

**\## Problem 1**

#1.1 

```{r}
a <- 2 + 5

a
```

\# 1.2 

```{r}
b <- a - 6

b
```

\# 1.3 

```{r}
radius1 = 5

area = pi*radius1*radius1 # note pi is a built in function

area
```

#### **Exercise 1 : Basic Expresssions**

Open a new R script file(navigate to File -\> New File -\> R script) 

On the first line of the script, write \## Exercise 1 Week 2. Write the calculations in the script file, separating each with a \# \[label\]. For example, \# 1.1 and #1.1. 

Calculations: 

1.  100 \* 4

2.  5 - 7 

3.  9 - 4\*2 

4.  (9-4)\*2 

5.  800/2ˆ2 

Objective: Understand that order of operations matters within R. For more information, see here: https: //www.datamentor.io/r-programming/precedence-associativity/ 

After you add the calculations and comments to your script file, go ahead and run the file. You can run the file by clicking run on the top of the text editor window or the down arrow for source (source with echo). 

#### **Exercise 2 : Variables**

Engineering results frequently require unit conversions to share information appropriately with an audience. In the course Introduction to BSE, you learned about mass balances. In our field, we frequently measure the volume of a substance (e.g., water, chemical) through a place (e.g. pipe, river) over a given time. We call this a volumetric flux, with units of Lˆ3/T (L = length, T = time). 

![Figure 2: Display output for exercise 1 ](https://lh7-us.googleusercontent.com/kuhQ27Bw2QdgWLfTtZ8DmIJze9ViDr-uBV3l1A5ZEBzO6UB21g9k9DXPoxiFR2EFz95w0XfPa4cOzmh_Kg53upXexsXlJ_GIg6_Uc2xULRxFK1PSjTVLlshI7x0gqFye2KS4G6LiWQ3Zg_onLvkqzQ)

Imagine you are on an international consulting team that is working on the design of a large food processing facility. While here in the US, we often use english units for length (e.g. feet) whereas most of the rest of the world uses the SI system (e.g., meters). 

Create an R-script that converts a flowrate of ftˆ3/second to mˆ3/s. Include the following: - header - flowrate variable in ftˆ3/second that is equal to 1,500 - an equation that creates a new flowrate variable in mˆ3/s - the printed value of the new variable in mˆ3/s After you create the script, run with sources as echo. 

![Figure 3: Display output for exercise 1 ](https://lh7-us.googleusercontent.com/v2NoNoE168Xnvtzn5aaBAQijpiTXE3TivGTod-y5yU6-85lGvYX1FeflG1S0bIwwsCee0_QojfibUO-58ehgO7cmpzekl9fLDFAFxng_dVPeR8w46eQ4fDXn3yeOuvy0aNkjjKuCLATTfrHIt2gQCw)

### **Let's get started: Functions**

What is a function? - performs simple to complex expressions - often requires inputs \[known as the arguments\], some which are optional - used when a task is performed over and over again

An example function is abs(x) where abs is the function name and x is the input argument. This function computes the absolute value of the input argument. You can learn more about this function by typing ?abs into the console. 

```{r}
abs(-19)
```

Let's look at another build in function, str. What does it do? Well, find out by typing ?str. Here are some examples: 

```{r}
f <- ('BSE 3144')

g <- 19.292

h <- c(19,18,17,16)

h1 <-c(10:13)

i <- matrix(c(19,18,17,16,19,18,17,16,19,18,17,16),nrow=3)

j <- data.frame(h,h1)

str(f)
```

 

```{r}
str(g)
```

```{r}
str(h)
```

```{r}
str(i)
```

```{r}
str(j)
```

For the matrix i, what does the information from str(i) represent? You'll want to be comfortable with this. 

#### **Exercise 3: Functions**

Here are some example functions: 

-   abs() returns the absolute value of a number (e.g., abs(-2)) 

-   round(), rounds a number (the first argument) to a given number of decimal places (the second argument) (e.g., round(12.1123, 2)) 

-   sqrt(), takes the square root of a number (e.g., sqrt(4)) 

-   tolower(), makes a string all lower case (e.g., tolower("HELLO")) 

-   toupper(), makes a string all upper case (e.g., toupper("hello")) 

Use these built-in functions to print the following items: 

1.  The absolute value of -15.5. 

2.  4.483847 rounded to one decimal place. 

3.  3.8 rounded to the nearest integer. You don't have to specify the number of decimal places in this case if you don't want to, because round() will default to using 0 if the second argument is not provided. Look at help(round) or ?round to see how this is indicated. 

4.  "species" in all capital letters. 

5.  "SPECIES" in all lower case letters. 

6.  Assign the value of the square root of 6 to a variable. Then round the variable you've created to 2 decimal places and assign it to another variable. Print out the rounded value. 

7.  Do the same thing as task 6 (immediately above), but instead of creating the intermediate variable, perform both the square root and the round on a single line by putting the sqrt() call inside the round() call. 

![Figure 4: Display output for exercise 1 ](https://lh7-us.googleusercontent.com/9H0Xq4Z3bybUrZPd56ooule6AJzGDYhZBUwP32qIc1dJY1N3oxz-cPAzHvbO4iGWF6ARgw0hOQ9eVsccgn_8qRN-gccZE_R7P2wGVoyDfSQKkL86HNlzKq51JG_IvE2ctya8jDIkzKZsM6Cnlisq0Q)

### **Vectors**

-   Square brackets \[\] allow subsetting of vector 

-   for example, a vector x \<- c(1,2,38,4) can be reduced to 2,3 using the following: x\[2:3\] 

```{r}
x <- c(1,2,38,4)
x[2:3]
```

length() is a key function, gives you length of vector. Used in coding ALOT 

```{r}
f <- 1:4
length(f)
```

Other built in functions include mean, max, min, and sum. For example: 

```{r}
g <- c(10.9,4.5,6.4,5.3)

mean(g)
```

```{r}
sum(g)
```

### **Null values**

NA is used when there is a missing value. Consider the following: 

```{r}
g <- c(10.9,NA,6.4,5.3)

mean(g)
```

In order to quantify the mean and disclude NA: 

```{r}
g <- c(10.9,NA,6.4,5.3)

mean(g, na.rm = TRUE)
```

### **Vector Math**

Vector math operations are generally element by element. The vectors employed need to be the same size! For example, for the vectors x \<- c(6,3), y \<- c(3,3,6), and z \<- c(0,2,3), y and z can be multiplied together and the result would be (30, 3 2, 6:3) but xy results in an error since the vectors are not multiples of one another. If y had 4 cells, xy would work. 

```{r}
x <- c(6,3)

y <- c(3,3,6)

z <- c(0,2,3)

y*z
```

```{r}
x*y

```

```{r}
y <- c(3,3,6,4)

x*y
```

### **Filtering**

Suppose you want to filter a dataset based on names or values. Here are some approaches below using the sites, density, and area vectors. The == implies equal to. For not equal to, use != 

```{r}
sites <- c("a", "a", "b", "c")

density <- c(2.8, 3.2, 1.5, 3.8)

area <- c(3, 5, 1.9, 2.7)

density[sites == 'a']
```

For sites not equal to b. . . 

```{r}
density[sites != 'b']
```

Or if you want to do numerical comparisons, \>,\<,\<=: 

```{r}
sites[density>2.9]
```

#### **Exercise 4**

Cut and paste the following vector. Then use code to print the requested values related to the vector. You'll need to use na.rm = TRUE to ignore the null values. 

numbers \<- c(7, 6, 22, 5, NA, 42) 

-   The smallest number in the numbers vector 

-   The largest number in the numbers vector 

-   The average of the numbers in the numbers 

-   The sum of the values in the numbers vector 

#### **Exercise 5**

Cut and paste the following vector and then use code to print the requested values related to the vector. numbers \<- c(5, 2, 26, 8, 16) 

1.  The number of items in the numbers vector (using the length function) 

2.  The third item in the numbers vector (using \[\]) 

3.  The smallest number in the numbers vector (using the min function) 

4.  The largest number in the numbers vector (using the max function) 

5.  The average of the numbers in the numbers vector (using the mean function) 

6.  The first, second and third numbers in the numbers vector (using \[\]) 

7.  The sum of the values in the numbers vector (using the sum function) 

#### **Exercise 6**

You have data on the length, width, and height of 10 individuals of the yew Taxus baccata stored in the following vectors: 

length \<- c(2.2, 2.1, 2.7, 3.0, 3.1, 2.5, 1.9, 1.1, 3.5, 2.9) 

width \<- c(1.3, 2.2, 1.5, 4.5, 3.1, NA, 1.8, 0.5, 2.0, 2.7) 

height \<- c(9.6, 7.6, 2.2, 1.5, 4.0, 3.0, 4.5, 2.3, 7.5, 3.2) 

Copy these vectors into an R script and then determine the following: 

1.  The volume of each shrub (length × width × height). Storing this in a variable will make some of the next problems easier. 

2.  The sum of the volume of all of the shrubs (using the sum function). 

3.  A vector of the height of shrubs with lengths \> 2.5. 

4.  A vector of the height of shrubs with heights \> 5. 

5.  A vector of the heights of the first 5 shrubs (using \[\]). 

6.  A vector of the volumes of the first 3 shrubs (using \[\]). 

7.  A vector of the volumes of the last 5 shrubs with the code written so that it will return the last 5 values regardless of the length of the vector (i.e., it will give the last 5 values if their are 10, 20, or 50 individuals). 

#### **Exercise 7**

Create the following variables using the described approach: 

1.  A vector named x from 1 to 10 with a step size of 1 

2.  A vector names x from 10 to 1 with a step size of 1 

3.  A vector named x from 1 to 0 with a step size of 0.5 

Create a vector named y using the following command: y \<- 1:5. 

4.  Now, using the length command, create a new variable z which contains only the last value in y.

5.  Create a new vector z that multiplies each element of y by 10. 

6.  Create a new vector z that contains only the last 2 values in the y-vector. 

## **Tidy data**

This section was excerpted from [chapter 12 of R for Data Science](https://r4ds.had.co.nz/tidy-data.html) providing valuable discussion on key concepts of data tidying.

### **Introduction**

> "Happy families are all alike; every unhappy family is unhappy in its own way." ---- Leo Tolstoy

> "Tidy datasets are all alike, but every messy dataset is messy in its own way." ---- Hadley Wickham

In this section, you will learn a consistent way to organise your data in R, an organisation called **tidy data**. Getting your data into this format requires some upfront work, but that work pays off in the long term. Once you have tidy data and the tidy tools provided by packages in the tidyverse, you will spend much less time munging data from one representation to another, allowing you to spend more time on the analytic questions at hand.

This chapter will give you a practical introduction to tidy data and the accompanying tools in the **tidyr** package. If you'd like to learn more about the underlying theory, you might enjoy the *Tidy Data* paper published in the Journal of Statistical Software, <http://www.jstatsoft.org/v59/i10/paper>.

#### **Prerequisites**

In this chapter we'll focus on tidyr, a package that provides a bunch of tools to help tidy up your messy datasets. tidyr is a member of the core tidyverse.

```{r}
library(tidyverse)
```

### **Tidy data**

You can represent the same underlying data in multiple ways. The example below shows the same data organised in four different ways. Each dataset shows the same values of four variables *country*, *year*, *population*, and *cases*, but each dataset organises the values in a different way.

```{r}
table1 
#> # A tibble: 6 × 4 
#>   country      year  cases population 
#>   <chr>       <dbl>  <dbl>      <dbl> 
#> 1 Afghanistan  1999    745   19987071 
#> 2 Afghanistan  2000   2666   20595360 
#> 3 Brazil       1999  37737  172006362 
#> 4 Brazil       2000  80488  174504898 
#> 5 China        1999 212258 1272915272 
#> 6 China        2000 213766 1280428583 table2 
#> # A tibble: 12 × 4 
#>   country      year type           count 
#>   <chr>       <dbl> <chr>          <dbl> 
#> 1 Afghanistan  1999 cases            745 
#> 2 Afghanistan  1999 population  19987071 
#> 3 Afghanistan  2000 cases           2666 
#> 4 Afghanistan  2000 population  20595360 
#> 5 Brazil       1999 cases          37737 
#> 6 Brazil       1999 population 172006362 
#> # ℹ 6 more rows table3 
#> # A tibble: 6 × 3 
#>   country      year rate              
#>   <chr>       <dbl> <chr>             
#> 1 Afghanistan  1999 745/19987071      
#> 2 Afghanistan  2000 2666/20595360     
#> 3 Brazil       1999 37737/172006362   
#> 4 Brazil       2000 80488/174504898   
#> 5 China        1999 212258/1272915272 
#> 6 China        2000 213766/1280428583  # Spread across two tibbles table4a  # cases 
#> # A tibble: 3 × 3 
#>   country     `1999` `2000` 
#>   <chr>        <dbl>  <dbl> 
#> 1 Afghanistan    745   2666 
#> 2 Brazil       37737  80488 
#> 3 China       212258 213766 table4b  # population 
#> # A tibble: 3 × 3 
#>   country         `1999`     `2000` 
#>   <chr>            <dbl>      <dbl> 
#> 1 Afghanistan   19987071   20595360 
#> 2 Brazil       172006362  174504898 
#> 3 China       1272915272 1280428583
```

These are all representations of the same underlying data, but they are not equally easy to use. One dataset, the tidy dataset, will be much easier to work with inside the tidyverse.

There are three interrelated rules which make a dataset tidy:

1.  Each variable must have its own column.

2.  Each observation must have its own row.

3.  Each value must have its own cell.

Figure 1-1 shows the rules visually.

![Figure 1-1-Following three rules makes a dataset tidy: variables are in columns, observations are in rows, and values are in cells.](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/91adc/images/tidy-1.png)

These three rules are interrelated because it's impossible to only satisfy two of the three. That interrelationship leads to an even simpler set of practical instructions:

1.  Put each dataset in a tibble.

2.  Put each variable in a column.

In this example, only `table1` is tidy. It's the only representation where each column is a variable.

Why ensure that your data is tidy? There are two main advantages:

1.  There's a general advantage to picking one consistent way of storing data. If you have a consistent data structure, it's easier to learn the tools that work with it because they have an underlying uniformity.

2.  There's a specific advantage to placing variables in columns because it allows R's vectorised nature to shine. As you learned in [mutate](https://r4ds.had.co.nz/transform.html#mutate-funs) and [summary functions](https://r4ds.had.co.nz/tidy-data.html#summary-funs), most built-in R functions work with vectors of values. That makes transforming tidy data feel particularly natural.

dplyr, ggplot2, and all the other packages in the tidyverse are designed to work with tidy data. Here are a couple of small examples showing how you might work with `table1`.

```{r}
# Compute rate per 10,000  
table1 %>%       
  mutate(rate = cases / population * 10000)  
#> # A tibble: 6 × 5  
#> country      year  cases population  rate  
#> <chr>       <dbl>  <dbl>      <dbl> <dbl> 
#> 1 Afghanistan  1999    745   19987071 0.373  
#> 2 Afghanistan  2000   2666   20595360 1.29    
#> 3 Brazil       1999  37737  172006362 2.19   
#> 4 Brazil       2000  80488  174504898 4.61   
#> 5 China        1999 212258 1272915272 1.67   
#> 6 China        2000 213766 1280428583 1.67    
# Compute cases per year  
table1 %>%       
  count(year, wt = cases)  
#> # A tibble: 2 × 2  
#>    year      n    
#>    <dbl>  <dbl>  
#>    1  1999 250740  
#>    2  2000 296920   
# Visualise changes over time  
library(ggplot2)  
ggplot(table1, aes(year, cases)) +       
  geom_line(aes(group = country), colour = "grey50") +       
  geom_point(aes(colour = country))
```

#### **Exercises**

1.  Using prose, describe how the variables and observations are organised in each of the sample tables.

2.  Compute the `rate` for `table2`, and `table4a` + `table4b`. You will need to perform four operations:

    1.  Extract the number of TB cases per country per year.

    2.  Extract the matching population per country per year.

    3.  Divide cases by population, and multiply by 10000.

    4.  Store back in the appropriate place.

    Which representation is easiest to work with? Which is hardest? Why?

3.  Recreate the plot showing change in cases over time using `table2` instead of `table1`. What do you need to do first?

### **Pivoting**

The principles of tidy data seem so obvious that you might wonder if you'll ever encounter a dataset that isn't tidy. Unfortunately, however, most data that you will encounter will be untidy. There are two main reasons:

1.  Most people aren't familiar with the principles of tidy data, and it's hard to derive them yourself unless you spend a *lot* of time working with data.

2.  Data is often organised to facilitate some use other than analysis. For example, data is often organised to make entry as easy as possible.

This means for most real analyses, you'll need to do some tidying. The first step is always to figure out what the variables and observations are. Sometimes this is easy; other times you'll need to consult with the people who originally generated the data. The second step is to resolve one of two common problems:

1.  One variable might be spread across multiple columns.

2.  One observation might be scattered across multiple rows.

Typically a dataset will only suffer from one of these problems; it'll only suffer from both if you're really unlucky! To fix these problems, you'll need the two most important functions in tidyr: [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) and [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html).

#### **Longer**

A common problem is a dataset where some of the column names are not names of variables, but *values* of a variable. Take `table4a`: the column names `1999` and `2000` represent values of the `year` variable, the values in the `1999` and `2000` columns represent values of the `cases` variable, and each row represents two observations, not one.

```{r}
table4a 
#> # A tibble: 3 × 3 
#>   country     `1999` `2000` 
#>   <chr>        <dbl>  <dbl> 
#> 1 Afghanistan    745   2666 
#> 2 Brazil       37737  80488 
#> 3 China       212258 213766
```

To tidy a dataset like this, we need to **pivot** the offending columns into a new pair of variables. To describe that operation we need three parameters:

-   The set of columns whose names are values, not variables. In this example, those are the columns `1999` and `2000`.

-   The name of the variable to move the column names to. Here it is `year`.

-   The name of the variable to move the column values to. Here it's `cases`.

Together those parameters generate the call to [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html):

```{r}
table4a %>%    
  pivot_longer(c(`1999`, `2000`), 
               names_to = "year", 
               values_to = "cases") 
#> # A tibble: 6 × 3 
#>   country     year   cases 
#>   <chr>       <chr>  <dbl> 
#> 1 Afghanistan 1999     745 
#> 2 Afghanistan 2000    2666 
#> 3 Brazil      1999   37737 
#> 4 Brazil      2000   80488 
#> 5 China       1999  212258 
#> 6 China       2000  213766
```

The columns to pivot are specified with [`dplyr::select()`](https://dplyr.tidyverse.org/reference/select.html) style notation. Here there are only two columns, so we list them individually. Note that "1999" and "2000" are non-syntactic names (because they don't start with a letter) so we have to surround them in backticks. To refresh your memory of the other ways to select columns, see [select](https://r4ds.had.co.nz/transform.html#select).

`year` and `cases` do not exist in `table4a` so we put their names in quotes.

![Figure 1.2: Pivoting table4 into a longer, tidy form.](https://d33wubrfki0l68.cloudfront.net/3aea19108d39606bbe49981acda07696c0c7fcd8/2de65/images/tidy-9.png)

In the final result, the pivoted columns are dropped, and we get new `year` and `cases` columns. Otherwise, the relationships between the original variables are preserved. Visually, this is shown in Figure [12.2](https://r4ds.had.co.nz/tidy-data.html#fig:tidy-gather).

[`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) makes datasets longer by increasing the number of rows and decreasing the number of columns. I don't believe it makes sense to describe a dataset as being in "long form". Length is a relative term, and you can only say (e.g.) that dataset A is longer than dataset B.

We can use [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) to tidy `table4b` in a similar fashion. The only difference is the variable stored in the cell values:

```{r}
table4b %>%    
  pivot_longer(c(`1999`, `2000`), 
               names_to = "year", 
               values_to = "population") 
#> # A tibble: 6 × 3 
#>   country     year  population 
#>   <chr>       <chr>      <dbl> 
#> 1 Afghanistan 1999    19987071 
#> 2 Afghanistan 2000    20595360 
#> 3 Brazil      1999   172006362 
#> 4 Brazil      2000   174504898 
#> 5 China       1999  1272915272 
#> 6 China       2000  1280428583
```

To combine the tidied versions of `table4a` and `table4b` into a single tibble, we need to use [`dplyr::left_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html), which you'll learn about in [relational data](https://r4ds.had.co.nz/relational-data.html#relational-data).

```{r}
tidy4a <- table4a %>%    
  pivot_longer(c(`1999`, `2000`), 
               names_to = "year", 
               values_to = "cases") 
tidy4b <- table4b %>%    
  pivot_longer(c(`1999`, `2000`), 
               names_to = "year", 
               values_to = "population") 
left_join(tidy4a, tidy4b) #> Joining with `by = join_by(country, year)` 
#> # A tibble: 6 × 4 
#>   country     year   cases population 
#>   <chr>       <chr>  <dbl>      <dbl> 
#> 1 Afghanistan 1999     745   19987071 
#> 2 Afghanistan 2000    2666   20595360 
#> 3 Brazil      1999   37737  172006362 
#> 4 Brazil      2000   80488  174504898 
#> 5 China       1999  212258 1272915272 
#> 6 China       2000  213766 1280428583
```

#### **Wider**

[`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) is the opposite of [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html). You use it when an observation is scattered across multiple rows. For example, take `table2`: an observation is a country in a year, but each observation is spread across two rows.

```{r}
table2 
#> # A tibble: 12 × 4 
#>   country      year type           count 
#>   <chr>       <dbl> <chr>          <dbl> 
#> 1 Afghanistan  1999 cases            745 
#> 2 Afghanistan  1999 population  19987071 
#> 3 Afghanistan  2000 cases           2666 
#> 4 Afghanistan  2000 population  20595360 
#> 5 Brazil       1999 cases          37737 
#> 6 Brazil       1999 population 172006362 
#> # ℹ 6 more rows
```

To tidy this up, we first analyse the representation in similar way to [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html). This time, however, we only need two parameters:

-   The column to take variable names from. Here, it's `type`.

-   The column to take values from. Here it's `count`.

Once we've figured that out, we can use [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html), as shown programmatically below, and visually in Figure 1-3.

```{r}
table2 %>%     
  pivot_wider(names_from = type, 
              values_from = count) 
#> # A tibble: 6 × 4 
#>   country      year  cases population 
#>   <chr>       <dbl>  <dbl>      <dbl> 
#> 1 Afghanistan  1999    745   19987071 
#> 2 Afghanistan  2000   2666   20595360 
#> 3 Brazil       1999  37737  172006362 
#> 4 Brazil       2000  80488  174504898 
#> 5 China        1999 212258 1272915272 
#> 6 China        2000 213766 1280428583
```

![Figure 1-3: Pivoting table2 into a "wider", tidy form.](https://d33wubrfki0l68.cloudfront.net/8350f0dda414629b9d6c354f87acf5c5f722be43/bcb84/images/tidy-8.png)

As you might have guessed from their names, [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) and [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) are complements. [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) makes wide tables narrower and longer; [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) makes long tables shorter and wider.

#### **Exercises**

1.  Why are [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) and [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) not perfectly symmetrical?\
    Carefully consider the following example:

```{r}
stocks <- tibble(   year   = c(2015, 2015, 2016, 2016),   
                    half  = c(   1,    2,     1,    2),   
                    return = c(1.88, 0.59, 0.92, 0.17) ) 
stocks %>%    
  pivot_wider(names_from = year, values_from = return) %>%    
  pivot_longer(`2015`:`2016`, names_to = "year", values_to = "return")
```

1.  (Hint: look at the variable types and think about column *names*.)

    [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) has a `names_ptypes` argument, e.g.  `names_ptypes = list(year = double())`. What does it do?

2.  Why does this code fail?

```{r}
table4a %>%    
  pivot_longer(c(1999, 2000), 
               names_to = "year", 
               values_to = "cases") 
#> Error in `pivot_longer()`: 
#> ! Can't subset columns past the end. 
#> ℹ Locations 1999 and 2000 don't exist. 
#> ℹ There are only 3 columns.
```

3.  What would happen if you widen this table? Why? How could you add a new column to uniquely identify each value?

```{r}
people <- tribble(
  ~name,             ~names,  ~values,
  #-----------------|--------|------
  "Phillip Woods",   "age",       45,
  "Phillip Woods",   "height",   186,
  "Phillip Woods",   "age",       50,
  "Jessica Cordero", "age",       37,
  "Jessica Cordero", "height",   156
)
```

4.  Tidy the simple tibble below. Do you need to make it wider or longer? What are the variables?

    ```{r}
    preg <- tribble(   ~pregnant, ~male, ~female,   "yes",     NA,    10,   "no",      20,    12 )
    ```

### **Separating and uniting**

So far you've learned how to tidy `table2` and `table4`, but not `table3`. `table3` has a different problem: we have one column (`rate`) that contains two variables (`cases` and `population`). To fix this problem, we'll need the [`separate()`](https://tidyr.tidyverse.org/reference/separate.html) function. You'll also learn about the complement of [`separate()`](https://tidyr.tidyverse.org/reference/separate.html): [`unite()`](https://tidyr.tidyverse.org/reference/unite.html), which you use if a single variable is spread across multiple columns.

#### **Separate**

[`separate()`](https://tidyr.tidyverse.org/reference/separate.html) pulls apart one column into multiple columns, by splitting wherever a separator character appears. Take `table3`:

```{r}
table3 
#> # A tibble: 6 × 3 
#>   country      year rate              
#>   <chr>       <dbl> <chr>             
#> 1 Afghanistan  1999 745/19987071      
#> 2 Afghanistan  2000 2666/20595360     
#> 3 Brazil       1999 37737/172006362   
#> 4 Brazil       2000 80488/174504898   
#> 5 China        1999 212258/1272915272 
#> 6 China        2000 213766/1280428583
```

The `rate` column contains both `cases` and `population` variables, and we need to split it into two variables. [`separate()`](https://tidyr.tidyverse.org/reference/separate.html) takes the name of the column to separate, and the names of the columns to separate into, as shown in Figure 1-4 and the code below.

```{r}
table3 %>%    
  separate(rate, into = c("cases", "population")) 
#> # A tibble: 6 × 4 
#>   country      year cases  population 
#>   <chr>       <dbl> <chr>  <chr>      
#> 1 Afghanistan  1999 745    19987071   
#> 2 Afghanistan  2000 2666   20595360   
#> 3 Brazil       1999 37737  172006362  
#> 4 Brazil       2000 80488  174504898  
#> 5 China        1999 212258 1272915272 
#> 6 China        2000 213766 1280428583
```

![Figure 1-4: Separating table3 makes it tidy](https://d33wubrfki0l68.cloudfront.net/f6fca537e77896868fedcd85d9d01031930d76c9/637d9/images/tidy-17.png)

By default, [`separate()`](https://tidyr.tidyverse.org/reference/separate.html) will split values wherever it sees a non-alphanumeric character (i.e. a character that isn't a number or letter). For example, in the code above, [`separate()`](https://tidyr.tidyverse.org/reference/separate.html) split the values of `rate` at the forward slash characters. If you wish to use a specific character to separate a column, you can pass the character to the `sep` argument of [`separate()`](https://tidyr.tidyverse.org/reference/separate.html). For example, we could rewrite the code above as:

`{r} table3 %>%    separate(rate, into = c("cases", "population"), sep = "/")}`

(Formally, `sep` is a regular expression, which you'll learn more about in [strings](https://r4ds.had.co.nz/strings.html#strings).)

Look carefully at the column types: you'll notice that `cases` and `population` are character columns. This is the default behaviour in [`separate()`](https://tidyr.tidyverse.org/reference/separate.html): it leaves the type of the column as is. Here, however, it's not very useful as those really are numbers. We can ask [`separate()`](https://tidyr.tidyverse.org/reference/separate.html) to try and convert to better types using `convert = TRUE`:

```{r}
table3 %>%    
  separate(rate, into = c("cases", "population"), 
           convert = TRUE) 
#> # A tibble: 6 × 4 
#>   country      year  cases population 
#>   <chr>       <dbl>  <int>      <int> 
#> 1 Afghanistan  1999    745   19987071 
#> 2 Afghanistan  2000   2666   20595360 
#> 3 Brazil       1999  37737  172006362 
#> 4 Brazil       2000  80488  174504898 
#> 5 China        1999 212258 1272915272 
#> 6 China        2000 213766 1280428583
```

You can also pass a vector of integers to `sep`. [`separate()`](https://tidyr.tidyverse.org/reference/separate.html) will interpret the integers as positions to split at. Positive values start at 1 on the far-left of the strings; negative value start at -1 on the far-right of the strings. When using integers to separate strings, the length of `sep` should be one less than the number of names in `into`.

You can use this arrangement to separate the last two digits of each year. This make this data less tidy, but is useful in other cases, as you'll see in a little bit.

```{r}
table3 %>%    
  separate(year, into = c("century", "year"), sep = 2) 
#> # A tibble: 6 × 4 
#>   country     century year  rate              
#>   <chr>       <chr>   <chr> <chr>             
#> 1 Afghanistan 19      99    745/19987071      
#> 2 Afghanistan 20      00    2666/20595360     
#> 3 Brazil      19      99    37737/172006362   
#> 4 Brazil      20      00    80488/174504898   
#> 5 China       19      99    212258/1272915272 
#> 6 China       20      00    213766/1280428583
```

### **Unite**

[`unite()`](https://tidyr.tidyverse.org/reference/unite.html) is the inverse of [`separate()`](https://tidyr.tidyverse.org/reference/separate.html): it combines multiple columns into a single column. You'll need it much less frequently than [`separate()`](https://tidyr.tidyverse.org/reference/separate.html), but it's still a useful tool to have in your back pocket.

![Figure 1-5: Uniting table5 makes it tidy](https://d33wubrfki0l68.cloudfront.net/3d98d3ba019fed3f9ee328284568d4508e479ef8/0b3e6/images/tidy-18.png)

We can use [`unite()`](https://tidyr.tidyverse.org/reference/unite.html) to rejoin the *century* and *year* columns that we created in the last example. That data is saved as [`tidyr::table5`](https://tidyr.tidyverse.org/reference/table1.html). [`unite()`](https://tidyr.tidyverse.org/reference/unite.html) takes a data frame, the name of the new variable to create, and a set of columns to combine, again specified in [`dplyr::select()`](https://dplyr.tidyverse.org/reference/select.html) style:

```{r}
table5 %>%    
  unite(new, century, year) 
#> # A tibble: 6 × 3 
#>   country     new   rate              
#>   <chr>       <chr> <chr>             
#> 1 Afghanistan 19_99 745/19987071      
#> 2 Afghanistan 20_00 2666/20595360     
#> 3 Brazil      19_99 37737/172006362   
#> 4 Brazil      20_00 80488/174504898   
#> 5 China       19_99 212258/1272915272 
#> 6 China       20_00 213766/1280428583
```

In this case we also need to use the `sep` argument. The default will place an underscore (`_`) between the values from different columns. Here we don't want any separator so we use `""`:

```{r}
table5 %>%    
  unite(new, century, year, sep = "") 
#> # A tibble: 6 × 3 #>   country     new   rate              
#>   <chr>       <chr> <chr>             
#> 1 Afghanistan 1999  745/19987071      
#> 2 Afghanistan 2000  2666/20595360     
#> 3 Brazil      1999  37737/172006362   
#> 4 Brazil      2000  80488/174504898   
#> 5 China       1999  212258/1272915272 
#> 6 China       2000  213766/1280428583
```

#### **Exercises**

1.  What do the `extra` and `fill` arguments do in [`separate()`](https://tidyr.tidyverse.org/reference/separate.html)? Experiment with the various options for the following two toy datasets.

```{r}
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%    
  separate(x, c("one", "two", "three"))  
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%    
  separate(x, c("one", "two", "three"))
```

2.  Both [`unite()`](https://tidyr.tidyverse.org/reference/unite.html) and [`separate()`](https://tidyr.tidyverse.org/reference/separate.html) have a `remove` argument. What does it do? Why would you set it to `FALSE`?
3.  Compare and contrast [`separate()`](https://tidyr.tidyverse.org/reference/separate.html) and [`extract()`](https://tidyr.tidyverse.org/reference/extract.html). Why are there three variations of separation (by position, by separator, and with groups), but only one unite?

### **Missing values**

Changing the representation of a dataset brings up an important subtlety of missing values. Surprisingly, a value can be missing in one of two possible ways:

-   **Explicitly**, i.e. flagged with `NA`.

-   **Implicitly**, i.e. simply not present in the data.

Let's illustrate this idea with a very simple data set:

```{r}
stocks <- 
  tibble(   year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),   
            qtr  = c(   1,    2,    3,    4,    2,    3,    4),   
            return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66) )
```

There are two missing values in this dataset:

-   The return for the fourth quarter of 2015 is explicitly missing, because the cell where its value should be instead contains `NA`.

-   The return for the first quarter of 2016 is implicitly missing, because it simply does not appear in the dataset.

One way to think about the difference is with this Zen-like koan: An explicit missing value is the presence of an absence; an implicit missing value is the absence of a presence.

The way that a dataset is represented can make implicit values explicit. For example, we can make the implicit missing value explicit by putting years in the columns:

```{r}
stocks %>%    
  pivot_wider(names_from = year, values_from = return) 
#> # A tibble: 4 × 3 
#>     qtr `2015` `2016` 
#>   <dbl>  <dbl>  <dbl> 
#> 1     1   1.88  NA    
#> 2     2   0.59   0.92 
#> 3     3   0.35   0.17 
#> 4     4  NA      2.66
```

Because these explicit missing values may not be important in other representations of the data, you can set `values_drop_na = TRUE` in [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) to turn explicit missing values implicit:

```{r}
stocks %>%    
  pivot_wider(names_from = year, values_from = return) %>%    
  pivot_longer(     cols = c(`2015`, `2016`),      
                    names_to = "year",      
                    values_to = "return",      
                    values_drop_na = TRUE   ) 
#> # A tibble: 6 × 3 
#>     qtr year  return 
#>   <dbl> <chr>  <dbl> 
#> 1     1 2015    1.88 
#> 2     2 2015    0.59 
#> 3     2 2016    0.92 
#> 4     3 2015    0.35 
#> 5     3 2016    0.17 
#> 6     4 2016    2.66
```

Another important tool for making missing values explicit in tidy data is [`complete()`](https://tidyr.tidyverse.org/reference/complete.html):

```{r}
stocks %>%    
  complete(year, qtr) 
#> # A tibble: 8 × 3 
#>    year   qtr return 
#>   <dbl> <dbl>  <dbl> 
#> 1  2015     1   1.88 
#> 2  2015     2   0.59 
#> 3  2015     3   0.35 
#> 4  2015     4  NA    
#> 5  2016     1  NA    
#> 6  2016     2   0.92 
#> # ℹ 2 more rows
```

[`complete()`](https://tidyr.tidyverse.org/reference/complete.html) takes a set of columns, and finds all unique combinations. It then ensures the original dataset contains all those values, filling in explicit `NA`s where necessary.

There's one other important tool that you should know for working with missing values. Sometimes when a data source has primarily been used for data entry, missing values indicate that the previous value should be carried forward:

```{r}
treatment <- tribble(
  ~ person,           ~ treatment, ~response,
  "Derrick Whitmore", 1,           7,
  NA,                 2,           10,
  NA,                 3,           9,
  "Katherine Burke",  1,           4
)
```

You can fill in these missing values with [`fill()`](https://tidyr.tidyverse.org/reference/fill.html). It takes a set of columns where you want missing values to be replaced by the most recent non-missing value (sometimes called last observation carried forward).

```{r}
treatment %>% 
  fill(person)
#> # A tibble: 4 × 3
#>   person           treatment response
#>   <chr>                <dbl>    <dbl>
#> 1 Derrick Whitmore         1        7
#> 2 Derrick Whitmore         2       10
#> 3 Derrick Whitmore         3        9
#> 4 Katherine Burke          1        4
```

#### **Exercises**

1.  Compare and contrast the `fill` arguments to [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) and [`complete()`](https://tidyr.tidyverse.org/reference/complete.html).

2.  What does the direction argument to [`fill()`](https://tidyr.tidyverse.org/reference/fill.html) do?

### **Case Study**

To finish off the chapter, let's pull together everything you've learned to tackle a realistic data tidying problem. The [`tidyr::who`](https://tidyr.tidyverse.org/reference/who.html) dataset contains tuberculosis (TB) cases broken down by year, country, age, gender, and diagnosis method. The data comes from the *2014 World Health Organization Global Tuberculosis Report*, available at <http://www.who.int/tb/country/data/download/en/>.

There's a wealth of epidemiological information in this dataset, but it's challenging to work with the data in the form that it's provided:

```{r}
who
#> # A tibble: 7,240 × 60
#>   country   iso2  iso3   year new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544
#>   <chr>     <chr> <chr> <dbl>       <dbl>        <dbl>        <dbl>        <dbl>
#> 1 Afghanis… AF    AFG    1980          NA           NA           NA           NA
#> 2 Afghanis… AF    AFG    1981          NA           NA           NA           NA
#> 3 Afghanis… AF    AFG    1982          NA           NA           NA           NA
#> 4 Afghanis… AF    AFG    1983          NA           NA           NA           NA
#> 5 Afghanis… AF    AFG    1984          NA           NA           NA           NA
#> 6 Afghanis… AF    AFG    1985          NA           NA           NA           NA
#> # ℹ 7,234 more rows
#> # ℹ 52 more variables: new_sp_m4554 <dbl>, new_sp_m5564 <dbl>,
#> #   new_sp_m65 <dbl>, new_sp_f014 <dbl>, new_sp_f1524 <dbl>,
#> #   new_sp_f2534 <dbl>, new_sp_f3544 <dbl>, new_sp_f4554 <dbl>,
#> #   new_sp_f5564 <dbl>, new_sp_f65 <dbl>, new_sn_m014 <dbl>,
#> #   new_sn_m1524 <dbl>, new_sn_m2534 <dbl>, new_sn_m3544 <dbl>,
#> #   new_sn_m4554 <dbl>, new_sn_m5564 <dbl>, new_sn_m65 <dbl>, …
```

This is a very typical real-life example dataset. It contains redundant columns, odd variable codes, and many missing values. In short, `who` is messy, and we'll need multiple steps to tidy it. Like dplyr, tidyr is designed so that each function does one thing well. That means in real-life situations you'll usually need to string together multiple verbs into a pipeline.

The best place to start is almost always to gather together the columns that are not variables. Let's have a look at what we've got:

-   It looks like `country`, `iso2`, and `iso3` are three variables that redundantly specify the country.

-   `year` is clearly also a variable.

-   We don't know what all the other columns are yet, but given the structure in the variable names (e.g. `new_sp_m014`, `new_ep_m014`, `new_ep_f014`) these are likely to be values, not variables.

So we need to gather together all the columns from `new_sp_m014` to `newrel_f65`. We don't know what those values represent yet, so we'll give them the generic name `"key"`. We know the cells represent the count of cases, so we'll use the variable `cases`. There are a lot of missing values in the current representation, so for now we'll use `values_drop_na` just so we can focus on the values that are present.

```{r}
who1 <- who %>% 
  pivot_longer(
    cols = new_sp_m014:newrel_f65, 
    names_to = "key", 
    values_to = "cases", 
    values_drop_na = TRUE
  )
who1
#> # A tibble: 76,046 × 6
#>   country     iso2  iso3   year key          cases
#>   <chr>       <chr> <chr> <dbl> <chr>        <dbl>
#> 1 Afghanistan AF    AFG    1997 new_sp_m014      0
#> 2 Afghanistan AF    AFG    1997 new_sp_m1524    10
#> 3 Afghanistan AF    AFG    1997 new_sp_m2534     6
#> 4 Afghanistan AF    AFG    1997 new_sp_m3544     3
#> 5 Afghanistan AF    AFG    1997 new_sp_m4554     5
#> 6 Afghanistan AF    AFG    1997 new_sp_m5564     2
#> # ℹ 76,040 more rows
```

We can get some hint of the structure of the values in the new `key` column by counting them:

```{r}
who1 %>% 
  count(key)
#> # A tibble: 56 × 2
#>   key              n
#>   <chr>        <int>
#> 1 new_ep_f014   1032
#> 2 new_ep_f1524  1021
#> 3 new_ep_f2534  1021
#> 4 new_ep_f3544  1021
#> 5 new_ep_f4554  1017
#> 6 new_ep_f5564  1017
#> # ℹ 50 more rows
```

You might be able to parse this out by yourself with a little thought and some experimentation, but luckily we have the data dictionary handy. It tells us:

1.  The first three letters of each column denote whether the column contains new or old cases of TB. In this dataset, each column contains new cases.

2.  The next two letters describe the type of TB:

    -   `rel` stands for cases of relapse

    -   `ep` stands for cases of extrapulmonary TB

    -   `sn` stands for cases of pulmonary TB that could not be diagnosed by a pulmonary smear (smear negative)

    -   `sp` stands for cases of pulmonary TB that could be diagnosed by a pulmonary smear (smear positive)

3.  The sixth letter gives the sex of TB patients. The dataset groups cases by males (`m`) and females (`f`).

4.  The remaining numbers gives the age group. The dataset groups cases into seven age groups:

    -   `014` = 0 -- 14 years old

    -   `1524` = 15 -- 24 years old

    -   `2534` = 25 -- 34 years old

    -   `3544` = 35 -- 44 years old

    -   `4554` = 45 -- 54 years old

    -   `5564` = 55 -- 64 years old

    -   `65` = 65 or older

We need to make a minor fix to the format of the column names: unfortunately the names are slightly inconsistent because instead of `new_rel` we have `newrel` (it's hard to spot this here but if you don't fix it we'll get errors in subsequent steps). You'll learn about [`str_replace()`](https://stringr.tidyverse.org/reference/str_replace.html) in [strings](https://r4ds.had.co.nz/strings.html#strings), but the basic idea is pretty simple: replace the characters "newrel" with "new_rel". This makes all variable names consistent.

```{r}
who2 <- who1 %>% 
  mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who2
#> # A tibble: 76,046 × 6
#>   country     iso2  iso3   year key          cases
#>   <chr>       <chr> <chr> <dbl> <chr>        <dbl>
#> 1 Afghanistan AF    AFG    1997 new_sp_m014      0
#> 2 Afghanistan AF    AFG    1997 new_sp_m1524    10
#> 3 Afghanistan AF    AFG    1997 new_sp_m2534     6
#> 4 Afghanistan AF    AFG    1997 new_sp_m3544     3
#> 5 Afghanistan AF    AFG    1997 new_sp_m4554     5
#> 6 Afghanistan AF    AFG    1997 new_sp_m5564     2
#> # ℹ 76,040 more rows
```

We can separate the values in each code with two passes of [`separate()`](https://tidyr.tidyverse.org/reference/separate.html). The first pass will split the codes at each underscore.

```{r}
who3 <- who2 %>% 
  separate(key, c("new", "type", "sexage"), sep = "_")
who3
#> # A tibble: 76,046 × 8
#>   country     iso2  iso3   year new   type  sexage cases
#>   <chr>       <chr> <chr> <dbl> <chr> <chr> <chr>  <dbl>
#> 1 Afghanistan AF    AFG    1997 new   sp    m014       0
#> 2 Afghanistan AF    AFG    1997 new   sp    m1524     10
#> 3 Afghanistan AF    AFG    1997 new   sp    m2534      6
#> 4 Afghanistan AF    AFG    1997 new   sp    m3544      3
#> 5 Afghanistan AF    AFG    1997 new   sp    m4554      5
#> 6 Afghanistan AF    AFG    1997 new   sp    m5564      2
#> # ℹ 76,040 more rows
```

Then we might as well drop the `new` column because it's constant in this dataset. While we're dropping columns, let's also drop `iso2` and `iso3` since they're redundant.

```{r}
who3 %>% 
  count(new)
#> # A tibble: 1 × 2
#>   new       n
#>   <chr> <int>
#> 1 new   76046
who4 <- who3 %>% 
  select(-new, -iso2, -iso3)
```

Next we'll separate `sexage` into `sex` and `age` by splitting after the first character:

```{r}
who5 <- who4 %>% 
  separate(sexage, c("sex", "age"), sep = 1)
who5
#> # A tibble: 76,046 × 6
#>   country      year type  sex   age   cases
#>   <chr>       <dbl> <chr> <chr> <chr> <dbl>
#> 1 Afghanistan  1997 sp    m     014       0
#> 2 Afghanistan  1997 sp    m     1524     10
#> 3 Afghanistan  1997 sp    m     2534      6
#> 4 Afghanistan  1997 sp    m     3544      3
#> 5 Afghanistan  1997 sp    m     4554      5
#> 6 Afghanistan  1997 sp    m     5564      2
#> # ℹ 76,040 more rows
```

The `who` dataset is now tidy!

I've shown you the code a piece at a time, assigning each interim result to a new variable. This typically isn't how you'd work interactively. Instead, you'd gradually build up a complex pipe:

```{r}
who %>%
  pivot_longer(
    cols = new_sp_m014:newrel_f65, 
    names_to = "key", 
    values_to = "cases", 
    values_drop_na = TRUE
  ) %>% 
  mutate(
    key = stringr::str_replace(key, "newrel", "new_rel")
  ) %>%
  separate(key, c("new", "var", "sexage")) %>% 
  select(-new, -iso2, -iso3) %>% 
  separate(sexage, c("sex", "age"), sep = 1)
```

#### **Exercises**

1.  In this case study I set `values_drop_na = TRUE` just to make it easier to check that we had the correct values. Is this reasonable? Think about how missing values are represented in this dataset. Are there implicit missing values? What's the difference between an `NA` and zero?

2.  What happens if you neglect the [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html) step? (`mutate(names_from = stringr::str_replace(key, "newrel", "new_rel"))`)

3.  I claimed that `iso2` and `iso3` were redundant with `country`. Confirm this claim.

4.  For each country, year, and sex compute the total number of cases of TB. Make an informative visualisation of the data.

### **Non-tidy data**

Before we continue on to other topics, it's worth talking briefly about non-tidy data. Earlier in the chapter, I used the pejorative term "messy" to refer to non-tidy data. That's an oversimplification: there are lots of useful and well-founded data structures that are not tidy data. There are two main reasons to use other data structures:

-   Alternative representations may have substantial performance or space advantages.

-   Specialised fields have evolved their own conventions for storing data that may be quite different to the conventions of tidy data.

Either of these reasons means you'll need something other than a tibble (or data frame). If your data does fit naturally into a rectangular structure composed of observations and variables, I think tidy data should be your default choice. But there are good reasons to use other structures; tidy data is not the only way.

If you'd like to learn more about non-tidy data, I'd highly recommend this thoughtful blog post by Jeff Leek: <http://simplystatistics.org/2016/02/17/non-tidy-data/>
